<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
  <meta charset="utf-8">
  <title>Test Rough interact</title>
  <!-- inali.dev - interact-->
  <style media="screen">
  body {
    height: 100vh;
    width: 100vw;
  }
  .cuadro {
    margin: auto auto;
    background-color: orange;
    height: 200px;
    width: 200px;
    color: white;
    border-radius: 0.75em;
    padding: 4%;
    touch-action: none;
    user-select: none;
    -webkit-transform: translate(0px, 0px);
    transform: translate(0px, 0px);
  }
  .cuadro-dos {
    background-color: blue;
    height: 200px;
    width:  200px;
  }
  .expand {
    height: 300px;
    width: 300px;
  }
  .color {
    background-color: red;
  }

</style>
<script src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"></script>
</head>
<body>

  <div class="cuadro">Test Interact</div>
  <div class="cuadro-dos">Test Interact 2</div>

</body>

<script>
(
  function($) {
// drag
    interact('.cuadro')
    .draggable({
      inertia: true,
      modifiers: [
        interact.modifiers.restrictRect({
          restriction: 'body',
          endOnly: true
        })
      ],
      // autoScroll: true,

      onmove: dragMoveListener,

      onend: (e) => {
        console.log('drag')
        console.log(e)
      }

    })

  }()
)

function dragMoveListener (event) {
  var target = event.target
  // keep the dragged position in the data-x/data-y attributes
  var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx
  var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

  // translate the element
  target.style.webkitTransform =
    target.style.transform =
      'translate(' + x + 'px, ' + y + 'px)'

  // update the posiion attributes
  target.setAttribute('data-x', x)
  target.setAttribute('data-y', y)
}

// this is used later in the resizing and gesture demos
window.dragMoveListener = dragMoveListener
//
interact('.cuadro-dos')
  .on('tap', function (event) {
    event.currentTarget.classList.toggle('color')
    event.preventDefault()
  })
  .on('doubletap', function (event) {
    event.currentTarget.classList.toggle('large')
    event.currentTarget.classList.remove('rotate')
    event.preventDefault()
  })
  .on('hold', function (event) {
    event.currentTarget.classList.toggle('rotate')
    event.currentTarget.classList.remove('large')
  })


</script>
</html>
